diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index d6b3a80..f10af33 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -10,7 +10,7 @@
 
     <application
         android:allowBackup="true"
-        android:icon="@mipmap/ic_launcher"
+        android:icon="@drawable/ic_person_hiking_solid"
         android:label="@string/app_name"
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
diff --git a/app/src/main/java/com/example/stepapp/ui/home/HomeFragment.java b/app/src/main/java/com/example/stepapp/ui/home/HomeFragment.java
index cc8b849..4177f7d 100644
--- a/app/src/main/java/com/example/stepapp/ui/home/HomeFragment.java
+++ b/app/src/main/java/com/example/stepapp/ui/home/HomeFragment.java
@@ -16,7 +16,6 @@ import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatActivity;
 import androidx.fragment.app.Fragment;
 
 import com.example.stepapp.R;
@@ -32,9 +31,14 @@ public class HomeFragment extends Fragment {
 
     // Text view and Progress Bar variables
     public TextView stepsCountTextView;
-    public ProgressBar stepsCountProgressBar;
+    public TextView stepsGoalTextView;
 
+    public ProgressBar stepsCountProgressBar;
+    private int stepsGoal = 100;
     private SensorEventListener listener;
+    private Sensor accSensor;
+    private Sensor stepSensor;
+    private SensorManager sensorManager;
 
     // TODO 1: ACC sensors.
 
@@ -43,11 +47,18 @@ public class HomeFragment extends Fragment {
 
     public View onCreateView(@NonNull LayoutInflater inflater,
                              ViewGroup container, Bundle savedInstanceState) {
-
         View root = inflater.inflate(R.layout.fragment_home, container, false);
 
         // TODO 9: Initialize the TextView variable
+        stepsGoalTextView = (TextView) root.findViewById(R.id.stepsGoal);
+        stepsCountTextView = (TextView) root.findViewById(R.id.stepsCount);
+
+        sensorManager = (SensorManager) getActivity().getSystemService(Context.SENSOR_SERVICE);
+        accSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
+        stepSensor = sensorManager.getDefaultSensor(Sensor.TYPE_STEP_DETECTOR);
+        stepsCountProgressBar = root.findViewById(R.id.progressBar);
 
+        stepsGoalTextView.setText(String.valueOf(stepsGoal));
 
         // TODO 2: Get an instance of the sensor manager.
 
@@ -69,16 +80,26 @@ public class HomeFragment extends Fragment {
                     Toast.makeText(getContext(), "START", Toast.LENGTH_SHORT).show();
 
                     // TODO 3: Check if the Accelerometer sensor exists
-
+                    if (accSensor != null) {
+                        sensorManager.registerListener(listener, accSensor, SensorManager.SENSOR_DELAY_NORMAL);
+                    } else {
+                        Toast.makeText(getContext(), R.string.acc_not_available, Toast.LENGTH_SHORT);
+                    }
+
+                    if (stepSensor != null) {
+                        sensorManager.registerListener(listener, stepSensor, SensorManager.SENSOR_DELAY_NORMAL);
+                    } else {
+                        Toast.makeText(getContext(), R.string.step_not_available, Toast.LENGTH_SHORT);
+                    }
 
                     // Check if the Step detector sensor exists
 
 
-
                 } else if (group.getCheckedButtonId() == R.id.toggleStop) {
                     //Place code related to Stop button
                     Toast.makeText(getContext(), "STOP", Toast.LENGTH_SHORT).show();
 
+                    sensorManager.unregisterListener(listener);
                     // TODO 4: Unregister the listener
 
                 }
@@ -89,140 +110,153 @@ public class HomeFragment extends Fragment {
 
 
     }
-}
 
-// Sensor event listener
-class StepCounterListener implements SensorEventListener {
 
-    private long lastUpdate = 0;
+    // Sensor event listener
+    class StepCounterListener implements SensorEventListener {
 
-    // ACC Step counter
-    public static int mACCStepCounter = 0;
-    ArrayList<Integer> mACCSeries = new ArrayList<Integer>();
-    private double accMag = 0;
-    private int lastXPoint = 1;
-    int stepThreshold = 6;
+        private long lastUpdate = 0;
 
-    // Android step detector
-    int mAndroidStepCount = 0;
+        // ACC Step counter
+        public int mACCStepCounter = 0;
+        public int stepSensorStepCounter = 0;
+        ArrayList<Integer> mACCSeries = new ArrayList<Integer>();
+        private double accMag = 0;
+        private int lastXPoint = 1;
+        int stepThreshold = 6;
 
-    // TextView
-    TextView stepsCountTextView;
 
-    //TODO 10
+        // Android step detector
+        int mAndroidStepCount = 0;
 
+        //TODO 10
 
-    @Override
-    public void onSensorChanged(SensorEvent event) {
 
-        switch (event.sensor.getType()) {
+        @Override
+        public void onSensorChanged(SensorEvent event) {
 
-            // TODO 5: Get the sensor type
-            case Sensor.TYPE_LINEAR_ACCELERATION:
 
-            // TODO 6: Get sensor's values
+            switch (event.sensor.getType()) {
 
 
-            //////////////////////////// -- PRINT ACC VALUES -- ////////////////////////////////////
-            // TODO 7: Uncomment the following code
+                // TODO 5: Get the sensor type
+                case Sensor.TYPE_LINEAR_ACCELERATION:
+                    float x = event.values[0];
+                    float y = event.values[1];
+                    float z = event.values[2];
 
-            /*
-                // Timestamp
-                long timeInMillis = System.currentTimeMillis() + (event.timestamp - SystemClock.elapsedRealtimeNanos()) / 1000000;
 
-                // Convert the timestamp to date
-                SimpleDateFormat jdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-                jdf.setTimeZone(TimeZone.getTimeZone("GMT+2"));
-                String date = jdf.format(timeInMillis);
+                    // TODO 6: Get sensor's values
 
-                // print a value every 1000 ms
-                long curTime = System.currentTimeMillis();
-                if ((curTime - lastUpdate) > 1000) {
-                    lastUpdate = curTime;
 
-                    Log.d("ACC", "X: " + String.valueOf(x) + " Y: " + String.valueOf(y) + " Z: "
-                            + String.valueOf(z) + " t: " + String.valueOf(date));
+                    //////////////////////////// -- PRINT ACC VALUES -- ////////////////////////////////////
+                    // TODO 7: Uncomment the following code
 
-                }
 
-            */
+                    // Timestamp
+                    long timeInMillis = System.currentTimeMillis() + (event.timestamp - SystemClock.elapsedRealtimeNanos()) / 1000000;
 
-            ////////////////////////////////////////////////////////////////////////////////////////
+                    // Convert the timestamp to date
+                    SimpleDateFormat jdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+                    jdf.setTimeZone(TimeZone.getTimeZone("GMT+2"));
+                    String date = jdf.format(timeInMillis);
 
-            // TODO 8: Compute the ACC magnitude
+                    // print a value every 1000 ms
+                    long curTime = System.currentTimeMillis();
+                    if ((curTime - lastUpdate) > 1000) {
+                        lastUpdate = curTime;
 
-            //Update the Magnitude series
+                        Log.d("ACCELERATION", "X: " + String.valueOf(x) + " Y: " + String.valueOf(y) + " Z: "
+                                + String.valueOf(z) + " t: " + String.valueOf(date));
 
+                    }
 
-            /// STEP COUNTER ACC ////
-            // Calculate ACC peaks and steps
 
-            peakDetection();
+                    ////////////////////////////////////////////////////////////////////////////////////////
 
-            break;
+                    // TODO 8: Compute the ACC magnitude
 
-            // case Step detector
+                    //Update the Magnitude series
 
-            // Calculate the number of steps
 
-        }
-    }
+                    /// STEP COUNTER ACC ////
+                    // Calculate ACC peaks and steps
+                    int acc_magnitude = (int) Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
+                    mACCSeries.add(acc_magnitude);
 
+                    peakDetection();
 
+                    break;
 
-    @Override
-    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+                case Sensor.TYPE_STEP_DETECTOR:
+                    countSteps();
+                    break;
 
-    }
+                // case Step detector
 
+                // Calculate the number of steps
+
+            }
+        }
 
-    private void peakDetection() {
-        int windowSize = 20;
 
-        /* Peak detection algorithm derived from: A Step Counter Service for Java-Enabled Devices Using a Built-In Accelerometer, Mladenov et al.
-         */
-        int highestValX = mACCSeries.size(); // get the length of the series
-        if (highestValX - lastXPoint < windowSize) { // if the segment is smaller than the processing window skip it
-            return;
+        @Override
+        public void onAccuracyChanged(Sensor sensor, int accuracy) {
+
         }
 
-        List<Integer> valuesInWindow = mACCSeries.subList(lastXPoint,highestValX);
 
-        lastXPoint = highestValX;
+        private void peakDetection() {
+            int windowSize = 20;
+
+            /* Peak detection algorithm derived from: A Step Counter Service for Java-Enabled Devices Using a Built-In Accelerometer, Mladenov et al.
+             */
+            int highestValX = mACCSeries.size(); // get the length of the series
+            if (highestValX - lastXPoint < windowSize) { // if the segment is smaller than the processing window skip it
+                return;
+            }
 
-        int forwardSlope = 0;
-        int downwardSlope = 0;
+            List<Integer> valuesInWindow = mACCSeries.subList(lastXPoint, highestValX);
 
-        List<Integer> dataPointList = new ArrayList<Integer>();
+            lastXPoint = highestValX;
 
-        for (int p =0; p < valuesInWindow.size(); p++){
-            dataPointList.add(valuesInWindow.get(p));
-        }
+            int forwardSlope = 0;
+            int downwardSlope = 0;
 
+            List<Integer> dataPointList = new ArrayList<Integer>();
 
-        for (int i = 0; i < dataPointList.size(); i++) {
-            if (i == 0) {
+            for (int p = 0; p < valuesInWindow.size(); p++) {
+                dataPointList.add(valuesInWindow.get(p));
             }
-            else if (i < dataPointList.size() - 1) {
-                forwardSlope = dataPointList.get(i + 1) - dataPointList.get(i);
-                downwardSlope = dataPointList.get(i)- dataPointList.get(i - 1);
 
-                if (forwardSlope < 0 && downwardSlope > 0 && dataPointList.get(i) > stepThreshold ) {
-                    mACCStepCounter += 1;
-                    Log.d("ACC STEPS: ", String.valueOf(mACCStepCounter));
 
-                    //TODO 12: update the text view
+            for (int i = 0; i < dataPointList.size(); i++) {
+                if (i == 0) {
+                } else if (i < dataPointList.size() - 1) {
+                    forwardSlope = dataPointList.get(i + 1) - dataPointList.get(i);
+                    downwardSlope = dataPointList.get(i) - dataPointList.get(i - 1);
 
+                    Log.d("ACCELERATION SLOPE: ", "F: " + forwardSlope + " D: " + downwardSlope);
+                    if (forwardSlope < 0 && downwardSlope > 0 && dataPointList.get(i) > stepThreshold) {
+                        mACCStepCounter += 1;
+                        Log.d("ACCELERATION STEPS: ", String.valueOf(mACCStepCounter));
+
+                        //TODO 12: update the text view
+
+                    }
                 }
             }
         }
-    }
-
-    // Calculate the number of steps from the step detector
-    private void countSteps(float step) {
-
-
 
+        // Calculate the number of steps from the step detector
+        private void countSteps() {
+            stepSensorStepCounter++;
+            stepsCountTextView.setText(String.valueOf(stepSensorStepCounter));
+            Log.d("STEP: ", String.valueOf(stepSensorStepCounter));
+            stepsCountProgressBar.setProgress((int) (stepSensorStepCounter*100 / stepsGoal));
+        }
     }
 }
 
+
+
diff --git a/app/src/main/res/drawable/ic_pause_solid.xml b/app/src/main/res/drawable/ic_pause_solid.xml
new file mode 100644
index 0000000..3873c14
--- /dev/null
+++ b/app/src/main/res/drawable/ic_pause_solid.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="10dp"
+    android:height="10dp"
+    android:viewportWidth="512"
+    android:viewportHeight="512">
+  <path
+      android:pathData="M272,63.1l-32,0c-26.51,0 -48,21.49 -48,47.1v288c0,26.51 21.49,48 48,48L272,448c26.51,0 48,-21.49 48,-48v-288C320,85.49 298.5,63.1 272,63.1zM80,63.1l-32,0c-26.51,0 -48,21.49 -48,48v288C0,426.5 21.49,448 48,448l32,0c26.51,0 48,-21.49 48,-48v-288C128,85.49 106.5,63.1 80,63.1z"
+      android:fillColor="#D0312D"/>
+</vector>
diff --git a/app/src/main/res/drawable/ic_person_hiking_solid.xml b/app/src/main/res/drawable/ic_person_hiking_solid.xml
new file mode 100644
index 0000000..723bc37
--- /dev/null
+++ b/app/src/main/res/drawable/ic_person_hiking_solid.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="384dp"
+    android:height="512dp"
+    android:viewportWidth="384"
+    android:viewportHeight="512">
+  <path
+      android:pathData="M240,96c26.5,0 48,-21.5 48,-48S266.5,0 240,0C213.5,0 192,21.5 192,48S213.5,96 240,96zM80.01,287.1c7.31,0 13.97,-4.762 15.87,-11.86L137,117c0.347,-1.291 0.512,-2.588 0.512,-3.866c0,-7.011 -4.986,-13.44 -12.39,-15.13C118.4,96.38 111.7,95.6 105.1,95.6c-36.65,0 -70,23.84 -79.32,59.53L0.512,253.3C0.164,254.6 -0.002,255.9 -0.002,257.2c0,7.003 4.961,13.42 12.36,15.11L76.01,287.5C77.35,287.8 78.69,287.1 80.01,287.1zM368,160h-15.1c-8.875,0 -15.1,7.125 -15.1,16V192h-34.75l-46.75,-46.75C243.4,134.1 228.6,128 212.9,128C185.9,128 162.5,146.3 155.9,172.5L129,280.3C128.4,282.8 128,285.5 128,288.1c0,8.325 3.265,16.44 9.354,22.53l86.62,86.63V480c0,17.62 14.37,32 31.1,32s32,-14.38 32,-32v-82.75c0,-17.12 -6.625,-33.13 -18.75,-45.25l-46.87,-46.88c0.25,-0.5 0.5,-0.875 0.625,-1.375l19.1,-79.5l22.37,22.38C271.4,252.6 279.5,256 288,256h47.1v240c0,8.875 7.125,16 15.1,16h15.1C376.9,512 384,504.9 384,496v-320C384,167.1 376.9,160 368,160zM81.01,472.3c-0.672,2.63 -0.993,5.267 -0.993,7.86c0,14.29 9.749,27.29 24.24,30.89C106.9,511.8 109.5,512 112,512c14.37,0 27.37,-9.75 30.1,-24.25l25.25,-101l-52.75,-52.75L81.01,472.3z"
+      android:fillColor="#2196F3"/>
+</vector>
diff --git a/app/src/main/res/drawable/ic_play_solid.xml b/app/src/main/res/drawable/ic_play_solid.xml
new file mode 100644
index 0000000..f256698
--- /dev/null
+++ b/app/src/main/res/drawable/ic_play_solid.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="10dp"
+    android:height="10dp"
+    android:viewportWidth="512.0"
+    android:viewportHeight="512.0"
+    >
+  <path
+      android:pathData="M176,480C148.6,480 128,457.6 128,432v-352c0,-25.38 20.4,-47.98 48.01,-47.98c8.686,0 17.35,2.352 25.02,7.031l288,176C503.3,223.8 512,239.3 512,256s-8.703,32.23 -22.97,40.95l-288,176C193.4,477.6 184.7,480 176,480z"
+      android:fillColor="#3CB043"/>
+</vector>
diff --git a/app/src/main/res/layout/fragment_home.xml b/app/src/main/res/layout/fragment_home.xml
index c65ec59..df75149 100644
--- a/app/src/main/res/layout/fragment_home.xml
+++ b/app/src/main/res/layout/fragment_home.xml
@@ -6,6 +6,40 @@
     android:layout_height="match_parent"
     tools:context=".ui.home.HomeFragment">
 
+    <com.google.android.material.button.MaterialButtonToggleGroup
+        android:id="@+id/toggleButtonGroup"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="44dp"
+        app:singleSelection="true"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.914"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/toggleStart"
+            style="?attr/materialButtonOutlinedStyle"
+            android:layout_width="wrap_content"
+            android:drawableStart="@drawable/ic_play_solid"
+            android:layout_height="wrap_content"
+            android:text="@string/toggle_start"
+            app:icon="@drawable/ic_play_solid"
+
+        />
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/toggleStop"
+            style="?attr/materialButtonOutlinedStyle"
+            android:drawableStart="@drawable/ic_pause_solid"
+            app:icon="@drawable/ic_pause_solid"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/toggle_stop" />
+
+    </com.google.android.material.button.MaterialButtonToggleGroup>
+
+
     <LinearLayout
         android:id="@+id/linearLayout"
         android:layout_width="match_parent"
@@ -18,6 +52,7 @@
         app:layout_constraintTop_toTopOf="parent">
 
         <TextView
+            android:id="@+id/stepsGoal"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_marginStart="8dp"
@@ -60,36 +95,10 @@
         app:layout_constraintHorizontal_bias="0.0"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent"
-        android:progressDrawable="@drawable/circle"/>
-
-
-    <com.google.android.material.button.MaterialButtonToggleGroup
-        android:id="@+id/toggleButtonGroup"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginTop="44dp"
-        app:singleSelection="true"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.914"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent">
-
-        <com.google.android.material.button.MaterialButton
-            android:id="@+id/toggleStart"
-            style="?attr/materialButtonOutlinedStyle"
-
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/toggle_start"/>
-
-        <com.google.android.material.button.MaterialButton
-            android:id="@+id/toggleStop"
-            style="?attr/materialButtonOutlinedStyle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/toggle_stop" />
-
-    </com.google.android.material.button.MaterialButtonToggleGroup>
+        style="@android:style/Widget.ProgressBar.Horizontal"
+        android:progressDrawable="@drawable/circle"
+        android:progress="0"
+        />
 
 
 </androidx.constraintlayout.widget.ConstraintLayout>
